{"version":3,"sources":["images/ondanya/fullparty.png","images/ondanya/party.png","images/ondanya/smile.png","images/ondanya/approve.png","modules/Quote.js","images/ondanya/index.js","characters/FF.js","Home.js","App.js","serviceWorker.js","index.js","images/ondanya/hebireleased.png"],"names":["module","exports","Quote","text","className","images","original","Released","thumbnail","Smile","Approve","FullParty","Party","FF","id","src","alt","items","Home","App","hashType","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,4OCI5BC,EAFD,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAAc,gCAAYC,UAAU,SAASD,I,oFCI9CE,EAAS,CACpB,CACEC,SAAUC,IACVC,UAAWD,KAEb,CACED,SAAUG,IACVD,UAAWC,KAEb,CACEH,SAAUI,IACVF,UAAWE,KAEb,CACEJ,SAAUK,IACVH,UAAWG,KAEb,CACEL,SAAUM,IACVJ,UAAWI,MC0BAC,G,MA7CJ,WACT,OACE,yBAAKT,UAAU,MACb,kDACA,kBAAC,EAAD,CAAOD,KAAK,qFACZ,yBAAKW,GAAG,QAAQV,UAAU,aACxB,yBAAKA,UAAU,aACb,yUAOA,mOAKA,+KAMF,yBAAKA,UAAU,cACb,yBAAKW,IAAKL,IAASM,IAAI,4BAG3B,kBAAC,EAAD,CAAOb,KAAK,uCACZ,yBAAKC,UAAU,aACb,uGAIA,wIAKF,kBAAC,IAAD,CAAmBa,MAAOZ,OCnCjBa,G,MARF,WACX,OACE,yBAAKd,UAAU,QACb,0C,MC8BSe,MA9Bf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAS,WACf,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMhB,UAAU,SAASiB,GAAG,KAA5B,SAIF,4BACE,kBAAC,IAAD,CAAMjB,UAAU,SAASiB,GAAG,SAA5B,oBAON,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UCjBUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5B1C,EAAOC,QAAU,IAA0B,2C","file":"static/js/main.cf95a074.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fullparty.23fa2860.png\";","module.exports = __webpack_public_path__ + \"static/media/party.ad5be195.png\";","module.exports = __webpack_public_path__ + \"static/media/smile.8a309a9a.png\";","module.exports = __webpack_public_path__ + \"static/media/approve.0b4b4c9b.png\";","import React from \"react\";\r\n\r\nconst Quote = ({ text }) => <blockquote className=\"quote\">{text}</blockquote>;\r\n\r\nexport default Quote;\r\n","import Released from \"./hebireleased.png\";\r\nimport FullParty from \"./fullparty.png\";\r\nimport Party from \"./party.png\";\r\nimport Smile from \"./smile.png\";\r\nimport Approve from \"./approve.png\";\r\n\r\nexport const images = [\r\n  {\r\n    original: Released,\r\n    thumbnail: Released,\r\n  },\r\n  {\r\n    original: Smile,\r\n    thumbnail: Smile,\r\n  },\r\n  {\r\n    original: Approve,\r\n    thumbnail: Approve,\r\n  },\r\n  {\r\n    original: FullParty,\r\n    thumbnail: FullParty,\r\n  },\r\n  {\r\n    original: Party,\r\n    thumbnail: Party,\r\n  },\r\n];\r\n\r\nexport { Released, FullParty, Party, Smile, Approve };\r\n","import React from \"react\";\r\nimport ReactImageGallery from \"react-image-gallery\";\r\nimport { Quote } from \"../modules\";\r\nimport { images, Approve } from \"../images/ondanya\";\r\nimport \"./FF.scss\";\r\n\r\nconst FF = () => {\r\n  return (\r\n    <div className=\"FF\">\r\n      <h1>O’ndanya Hebi</h1>\r\n      <Quote text=\"Hi I’m O’ndanya Hebi, my name is quite common so just call me Hebi. :3\" />\r\n      <div id=\"intro\" className=\"paragraph\">\r\n        <div className=\"left-side\">\r\n          <p>\r\n            Hailing from Gridania now residing in Ul’dah at the time of the\r\n            calamity joining the Flames as a way to make money. After the\r\n            “assassination” of the sultana inpired by the tales of the Warrior\r\n            of Light she takes her positions more seriously going up the ranks\r\n            trying to help the WoL.\r\n          </p>\r\n          <p>\r\n            After some time passed she was chosen by the flames as a replacement\r\n            for the Warrior of Light, since sadly there was no one better\r\n            available, or no one was stupid enough to apply for the position.\r\n          </p>\r\n          <p>\r\n            With the Flames backing her up to some extent she managed to learn a\r\n            lot of different things as well meet the WoL helping them on the\r\n            occasion.\r\n          </p>\r\n        </div>\r\n        <div className=\"right-side\">\r\n          <img src={Approve} alt=\"O'ndanya Warior Smile\" />\r\n        </div>\r\n      </div>\r\n      <Quote text=\"One and multiple at the same time.\" />\r\n      <div className=\"paragraph\">\r\n        <p>\r\n          One of ~26 different sisters named by the convention of the\r\n          Moonkeepers.\r\n        </p>\r\n        <p>\r\n          The Miqo seems to be everywhere at the time of need, living a life of\r\n          one and multiple at the same time.\r\n        </p>\r\n      </div>\r\n      <ReactImageGallery items={images} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FF;\r\n","import React from \"react\";\r\nimport \"./Home.scss\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"home\">\r\n      <h1>Welcome</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport FF from \"./characters/FF\";\r\nimport Home from \"./Home\";\r\nimport \"./App.scss\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router hashType=\"noslash\">\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <Link className=\"button\" to=\"/\">\r\n              Home\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link className=\"button\" to=\"/FF14\">\r\n              O'ndanya Hebi\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n\r\n      <Switch>\r\n        <Route path=\"/FF14\">\r\n          <FF />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Home />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/hebireleased.dffefb0a.png\";"],"sourceRoot":""}